{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServerPluginInlineTraceDisabled = exports.ApolloServerPluginInlineTrace = void 0;\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nconst traceTreeBuilder_1 = require(\"../traceTreeBuilder\");\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginInlineTrace() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  let enabled = options.__onlyIfSchemaIsFederated ? null : true;\n  return {\n    __internal_plugin_id__() {\n      return 'InlineTrace';\n    },\n    async serverWillStart(_ref) {\n      let {\n        schema,\n        logger\n      } = _ref;\n      if (enabled === null) {\n        enabled = (0, schemaIsFederated_1.schemaIsFederated)(schema);\n        if (enabled) {\n          logger.info('Enabling inline tracing for this federated service. To disable, use ' + 'ApolloServerPluginInlineTraceDisabled.');\n        }\n      }\n    },\n    async requestDidStart(_ref2) {\n      let {\n        request: {\n          http\n        },\n        metrics\n      } = _ref2;\n      if (!enabled) {\n        return;\n      }\n      const treeBuilder = new traceTreeBuilder_1.TraceTreeBuilder({\n        rewriteError: options.rewriteError\n      });\n      if ((http === null || http === void 0 ? void 0 : http.headers.get('apollo-federation-include-trace')) !== 'ftv1') {\n        return;\n      }\n      if (metrics.captureTraces === false) {\n        return;\n      }\n      metrics.captureTraces = true;\n      treeBuilder.startTiming();\n      return {\n        async executionDidStart() {\n          return {\n            willResolveField(_ref3) {\n              let {\n                info\n              } = _ref3;\n              return treeBuilder.willResolveField(info);\n            }\n          };\n        },\n        async didEncounterErrors(_ref4) {\n          let {\n            errors\n          } = _ref4;\n          treeBuilder.didEncounterErrors(errors);\n        },\n        async willSendResponse(_ref5) {\n          let {\n            response\n          } = _ref5;\n          treeBuilder.stopTiming();\n          if (metrics.queryPlanTrace) {\n            treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n          }\n          const encodedUint8Array = apollo_reporting_protobuf_1.Trace.encode(treeBuilder.trace).finish();\n          const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n          const extensions = response.extensions || (response.extensions = Object.create(null));\n          if (typeof extensions.ftv1 !== 'undefined') {\n            throw new Error('The `ftv1` extension was already present.');\n          }\n          extensions.ftv1 = encodedBuffer.toString('base64');\n        }\n      };\n    }\n  };\n}\nexports.ApolloServerPluginInlineTrace = ApolloServerPluginInlineTrace;\nfunction ApolloServerPluginInlineTraceDisabled() {\n  return {\n    __internal_plugin_id__() {\n      return 'InlineTrace';\n    }\n  };\n}\nexports.ApolloServerPluginInlineTraceDisabled = ApolloServerPluginInlineTraceDisabled;","map":{"version":3,"names":["apollo_reporting_protobuf_1","require","traceTreeBuilder_1","schemaIsFederated_1","ApolloServerPluginInlineTrace","options","arguments","length","undefined","Object","create","enabled","__onlyIfSchemaIsFederated","__internal_plugin_id__","serverWillStart","_ref","schema","logger","schemaIsFederated","info","requestDidStart","_ref2","request","http","metrics","treeBuilder","TraceTreeBuilder","rewriteError","headers","get","captureTraces","startTiming","executionDidStart","willResolveField","_ref3","didEncounterErrors","_ref4","errors","willSendResponse","_ref5","response","stopTiming","queryPlanTrace","trace","queryPlan","encodedUint8Array","Trace","encode","finish","encodedBuffer","Buffer","from","byteOffset","byteLength","extensions","ftv1","Error","toString","exports","ApolloServerPluginInlineTraceDisabled"],"sources":["/Users/chadward/node_modules/apollo-server-core/src/plugin/inlineTrace/index.ts"],"sourcesContent":["import { Trace } from 'apollo-reporting-protobuf';\nimport { TraceTreeBuilder } from '../traceTreeBuilder';\nimport type { ApolloServerPluginUsageReportingOptions } from '../usageReporting/options';\nimport type { InternalApolloServerPlugin } from '../../internalPlugin';\nimport { schemaIsFederated } from '../schemaIsFederated';\n\nexport interface ApolloServerPluginInlineTraceOptions {\n  /**\n   * By default, all errors from this service get included in the trace.  You\n   * can specify a filter function to exclude specific errors from being\n   * reported by returning an explicit `null`, or you can mask certain details\n   * of the error by modifying it and returning the modified error.\n   */\n  rewriteError?: ApolloServerPluginUsageReportingOptions<never>['rewriteError'];\n  /**\n   * This option is for internal use by `apollo-server-core` only.\n   *\n   * By default we want to enable this plugin for federated schemas only, but we\n   * need to come up with our list of plugins before we have necessarily loaded\n   * the schema. So (unless the user installs this plugin or\n   * ApolloServerPluginInlineTraceDisabled themselves), `apollo-server-core`\n   * always installs this plugin and uses this option to make sure traces are\n   * only included if the schema appears to be federated.\n   */\n  __onlyIfSchemaIsFederated?: boolean;\n}\n\n// This ftv1 plugin produces a base64'd Trace protobuf containing only the\n// durationNs, startTime, endTime, and root fields.  This output is placed\n// on the `extensions`.`ftv1` property of the response.  The Apollo Gateway\n// utilizes this data to construct the full trace and submit it to Apollo's\n// usage reporting ingress.\nexport function ApolloServerPluginInlineTrace(\n  options: ApolloServerPluginInlineTraceOptions = Object.create(null),\n): InternalApolloServerPlugin {\n  let enabled: boolean | null = options.__onlyIfSchemaIsFederated ? null : true;\n  return {\n    __internal_plugin_id__() {\n      return 'InlineTrace';\n    },\n    async serverWillStart({ schema, logger }) {\n      // Handle the case that the plugin was implicitly installed. We only want it\n      // to actually be active if the schema appears to be federated. If you don't\n      // like the log line, just install `ApolloServerPluginInlineTrace()` in\n      // `plugins` yourself.\n      if (enabled === null) {\n        enabled = schemaIsFederated(schema);\n        if (enabled) {\n          logger.info(\n            'Enabling inline tracing for this federated service. To disable, use ' +\n              'ApolloServerPluginInlineTraceDisabled.',\n          );\n        }\n      }\n    },\n    async requestDidStart({ request: { http }, metrics }) {\n      if (!enabled) {\n        return;\n      }\n\n      const treeBuilder = new TraceTreeBuilder({\n        rewriteError: options.rewriteError,\n      });\n\n      // XXX Provide a mechanism to customize this logic.\n      if (http?.headers.get('apollo-federation-include-trace') !== 'ftv1') {\n        return;\n      }\n\n      // If some other (user-written?) plugin already decided that we are not\n      // capturing traces, then we should not capture traces.\n      if (metrics.captureTraces === false) {\n        return;\n      }\n\n      // Note that this will override any `fieldLevelInstrumentation` parameter\n      // to the usage reporting plugin for requests with the\n      // `apollo-federation-include-trace` header set.\n      metrics.captureTraces = true;\n\n      treeBuilder.startTiming();\n\n      return {\n        async executionDidStart() {\n          return {\n            willResolveField({ info }) {\n              return treeBuilder.willResolveField(info);\n            },\n          };\n        },\n\n        async didEncounterErrors({ errors }) {\n          treeBuilder.didEncounterErrors(errors);\n        },\n\n        async willSendResponse({ response }) {\n          // We record the end time at the latest possible time: right before serializing the trace.\n          // If we wait any longer, the time we record won't actually be sent anywhere!\n          treeBuilder.stopTiming();\n\n          // If we're in a gateway, include the query plan (and subgraph traces)\n          // in the inline trace. This is designed more for manually querying\n          // your graph while running locally to see what the query planner is\n          // doing rather than for running in production.\n          if (metrics.queryPlanTrace) {\n            treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n          }\n\n          const encodedUint8Array = Trace.encode(treeBuilder.trace).finish();\n          const encodedBuffer = Buffer.from(\n            encodedUint8Array,\n            encodedUint8Array.byteOffset,\n            encodedUint8Array.byteLength,\n          );\n\n          const extensions =\n            response.extensions || (response.extensions = Object.create(null));\n\n          // This should only happen if another plugin is using the same name-\n          // space within the `extensions` object and got to it before us.\n          if (typeof extensions.ftv1 !== 'undefined') {\n            throw new Error('The `ftv1` extension was already present.');\n          }\n\n          extensions.ftv1 = encodedBuffer.toString('base64');\n        },\n      };\n    },\n  };\n}\n\n// This plugin does nothing, but it ensures that ApolloServer won't try\n// to add a default ApolloServerPluginInlineTrace.\nexport function ApolloServerPluginInlineTraceDisabled(): InternalApolloServerPlugin {\n  return {\n    __internal_plugin_id__() {\n      return 'InlineTrace';\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}