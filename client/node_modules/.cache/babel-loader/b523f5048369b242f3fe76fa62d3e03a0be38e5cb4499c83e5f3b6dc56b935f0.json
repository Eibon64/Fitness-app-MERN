{"ast":null,"code":"const {\n  User,\n  Profile,\n  Exercise,\n  WeeklyStats\n} = require('../models');\nconst {\n  AuthenticationError\n} = require('apollo-server-express');\nconst {\n  signToken\n} = require('../../../server/utils/auth');\nconst stripe = require('stripe')('sk_test_51N9GI3HfMu1TGSRki70Om2NBeMHPhtiFJFDJGyMsVMBxNt0S3Px5kstlls10XPd3C0Q8wzGmLRodYWQa4vcHZ17y00AT3Mogxj');\nconst resolvers = {\n  Query: {\n    me: async (_, __, context) => {\n      if (context.user) {\n        const user = await User.findById(context.user._id).populate('profile').populate('exercises');\n        return user;\n      }\n      throw new AuthenticationError('Not logged in');\n    },\n    exercises: async () => {\n      const exercises = await Exercise.find();\n      return exercises;\n    },\n    weeklyStats: async () => {\n      const stats = await WeeklyStats.find();\n      return stats;\n    }\n  },\n  Mutation: {\n    signup: async (_, _ref) => {\n      let {\n        input\n      } = _ref;\n      const user = await User.create(input);\n      const token = signToken(user);\n      return {\n        token,\n        user\n      };\n    },\n    login: async (_, _ref2) => {\n      let {\n        input\n      } = _ref2;\n      const {\n        email,\n        password\n      } = input;\n      const user = await User.findOne({\n        email\n      });\n      if (!user || !user.verifyPassword(password)) {\n        throw new AuthenticationError('Invalid email or password');\n      }\n      const token = signToken(user);\n      return {\n        token,\n        user\n      };\n    },\n    addExercise: async (_, _ref3, context) => {\n      let {\n        input\n      } = _ref3;\n      if (!context.user) {\n        throw new AuthenticationError('Not logged in');\n      }\n      const exercise = await Exercise.create(input);\n      await User.findByIdAndUpdate(context.user._id, {\n        $push: {\n          exercises: exercise._id\n        }\n      });\n      return exercise;\n    },\n    addWeeklyStats: async (_, _ref4) => {\n      let {\n        input\n      } = _ref4;\n      const stats = await WeeklyStats.create(input);\n      return stats;\n    },\n    processPayment: async (_, _ref5, context) => {\n      let {\n        input\n      } = _ref5;\n      if (!context.user) {\n        throw new AuthenticationError('Not logged in');\n      }\n\n      // Retrieve the necessary payment details from the input\n      const {\n        amount,\n        paymentMethodId\n      } = input;\n      try {\n        // Create a PaymentIntent using the Stripe API\n        const paymentIntent = await stripe.paymentIntents.create({\n          amount,\n          currency: 'usd',\n          // Change this according to your currency\n          payment_method: paymentMethodId,\n          confirmation_method: 'manual',\n          confirm: true\n        });\n\n        // Handle any additional steps required by Stripe (e.g., 3D Secure authentication)\n        if (paymentIntent.status === 'requires_action' && paymentIntent.next_action.type === 'use_stripe_sdk') {\n          // Return the client secret to the client, which will be used to complete the payment process\n          return {\n            clientSecret: paymentIntent.client_secret\n          };\n        }\n\n        // Payment succeeded\n        // Perform any necessary actions in your application (e.g., update database, send email)\n        // Return the relevant data to the client\n        return {\n          success: true,\n          paymentIntentId: paymentIntent.id\n        };\n      } catch (error) {\n        // Handle errors and return relevant information to the client\n        console.error('Error processing payment:', error);\n        return {\n          success: false,\n          error: 'Payment failed'\n        };\n      }\n    }\n  }\n};\nmodule.exports = resolvers;","map":{"version":3,"names":["User","Profile","Exercise","WeeklyStats","require","AuthenticationError","signToken","stripe","resolvers","Query","me","_","__","context","user","findById","_id","populate","exercises","find","weeklyStats","stats","Mutation","signup","_ref","input","create","token","login","_ref2","email","password","findOne","verifyPassword","addExercise","_ref3","exercise","findByIdAndUpdate","$push","addWeeklyStats","_ref4","processPayment","_ref5","amount","paymentMethodId","paymentIntent","paymentIntents","currency","payment_method","confirmation_method","confirm","status","next_action","type","clientSecret","client_secret","success","paymentIntentId","id","error","console","module","exports"],"sources":["/Users/chadward/bootcamp/Fitness-app-MERN/client/src/schemas/resolvers.js"],"sourcesContent":["const { User, Profile, Exercise, WeeklyStats } = require('../models');\nconst { AuthenticationError } = require('apollo-server-express');\nconst { signToken } = require('../../../server/utils/auth');\nconst stripe = require('stripe')('sk_test_51N9GI3HfMu1TGSRki70Om2NBeMHPhtiFJFDJGyMsVMBxNt0S3Px5kstlls10XPd3C0Q8wzGmLRodYWQa4vcHZ17y00AT3Mogxj');\n\nconst resolvers = {\n  Query: {\n    me: async (_, __, context) => {\n      if (context.user) {\n        const user = await User.findById(context.user._id).populate('profile').populate('exercises');\n        return user;\n      }\n      throw new AuthenticationError('Not logged in');\n    },\n    exercises: async () => {\n      const exercises = await Exercise.find();\n      return exercises;\n    },\n    weeklyStats: async () => {\n      const stats = await WeeklyStats.find();\n      return stats;\n    },\n  },\n  Mutation: {\n    signup: async (_, { input }) => {\n      const user = await User.create(input);\n      const token = signToken(user);\n      return { token, user };\n    },\n    login: async (_, { input }) => {\n      const { email, password } = input;\n      const user = await User.findOne({ email });\n\n      if (!user || !user.verifyPassword(password)) {\n        throw new AuthenticationError('Invalid email or password');\n      }\n\n      const token = signToken(user);\n      return { token, user };\n    },\n    addExercise: async (_, { input }, context) => {\n      if (!context.user) {\n        throw new AuthenticationError('Not logged in');\n      }\n\n      const exercise = await Exercise.create(input);\n\n      await User.findByIdAndUpdate(context.user._id, { $push: { exercises: exercise._id } });\n\n      return exercise;\n    },\n    addWeeklyStats: async (_, { input }) => {\n      const stats = await WeeklyStats.create(input);\n      return stats;\n    },\n    processPayment: async (_, { input }, context) => {\n      if (!context.user) {\n        throw new AuthenticationError('Not logged in');\n      }\n\n      // Retrieve the necessary payment details from the input\n      const { amount, paymentMethodId } = input;\n\n      try {\n        // Create a PaymentIntent using the Stripe API\n        const paymentIntent = await stripe.paymentIntents.create({\n          amount,\n          currency: 'usd', // Change this according to your currency\n          payment_method: paymentMethodId,\n          confirmation_method: 'manual',\n          confirm: true,\n        });\n\n        // Handle any additional steps required by Stripe (e.g., 3D Secure authentication)\n        if (paymentIntent.status === 'requires_action' && paymentIntent.next_action.type === 'use_stripe_sdk') {\n          // Return the client secret to the client, which will be used to complete the payment process\n          return { clientSecret: paymentIntent.client_secret };\n        }\n\n        // Payment succeeded\n        // Perform any necessary actions in your application (e.g., update database, send email)\n        // Return the relevant data to the client\n        return { success: true, paymentIntentId: paymentIntent.id };\n      } catch (error) {\n        // Handle errors and return relevant information to the client\n        console.error('Error processing payment:', error);\n        return { success: false, error: 'Payment failed' };\n      }\n    },\n  },\n};\n\nmodule.exports = resolvers;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}