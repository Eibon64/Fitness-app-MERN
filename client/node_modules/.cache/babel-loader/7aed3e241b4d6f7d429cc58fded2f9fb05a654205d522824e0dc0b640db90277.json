{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFieldsWithDirectives = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction getFieldsWithDirectives(documentNode) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const result = {};\n  let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];\n  if (options.includeInputTypes) {\n    selected = [...selected, 'InputObjectTypeDefinition', 'InputObjectTypeExtension'];\n  }\n  const allTypes = documentNode.definitions.filter(obj => selected.includes(obj.kind));\n  for (const type of allTypes) {\n    const typeName = type.name.value;\n    if (type.fields == null) {\n      continue;\n    }\n    for (const field of type.fields) {\n      if (field.directives && field.directives.length > 0) {\n        const fieldName = field.name.value;\n        const key = `${typeName}.${fieldName}`;\n        const directives = field.directives.map(d => ({\n          name: d.name.value,\n          args: (d.arguments || []).reduce((prev, arg) => ({\n            ...prev,\n            [arg.name.value]: (0, graphql_1.valueFromASTUntyped)(arg.value)\n          }), {})\n        }));\n        result[key] = directives;\n      }\n    }\n  }\n  return result;\n}\nexports.getFieldsWithDirectives = getFieldsWithDirectives;","map":{"version":3,"names":["Object","defineProperty","exports","value","getFieldsWithDirectives","graphql_1","require","documentNode","options","arguments","length","undefined","result","selected","includeInputTypes","allTypes","definitions","filter","obj","includes","kind","type","typeName","name","fields","field","directives","fieldName","key","map","d","args","reduce","prev","arg","valueFromASTUntyped"],"sources":["/Users/chadward/node_modules/@graphql-tools/utils/cjs/get-fields-with-directives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFieldsWithDirectives = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction getFieldsWithDirectives(documentNode, options = {}) {\n    const result = {};\n    let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];\n    if (options.includeInputTypes) {\n        selected = [...selected, 'InputObjectTypeDefinition', 'InputObjectTypeExtension'];\n    }\n    const allTypes = documentNode.definitions.filter(obj => selected.includes(obj.kind));\n    for (const type of allTypes) {\n        const typeName = type.name.value;\n        if (type.fields == null) {\n            continue;\n        }\n        for (const field of type.fields) {\n            if (field.directives && field.directives.length > 0) {\n                const fieldName = field.name.value;\n                const key = `${typeName}.${fieldName}`;\n                const directives = field.directives.map(d => ({\n                    name: d.name.value,\n                    args: (d.arguments || []).reduce((prev, arg) => ({ ...prev, [arg.name.value]: (0, graphql_1.valueFromASTUntyped)(arg.value) }), {}),\n                }));\n                result[key] = directives;\n            }\n        }\n    }\n    return result;\n}\nexports.getFieldsWithDirectives = getFieldsWithDirectives;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,SAASF,uBAAuBA,CAACG,YAAY,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvD,MAAMG,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIC,QAAQ,GAAG,CAAC,sBAAsB,EAAE,qBAAqB,CAAC;EAC9D,IAAIL,OAAO,CAACM,iBAAiB,EAAE;IAC3BD,QAAQ,GAAG,CAAC,GAAGA,QAAQ,EAAE,2BAA2B,EAAE,0BAA0B,CAAC;EACrF;EACA,MAAME,QAAQ,GAAGR,YAAY,CAACS,WAAW,CAACC,MAAM,CAACC,GAAG,IAAIL,QAAQ,CAACM,QAAQ,CAACD,GAAG,CAACE,IAAI,CAAC,CAAC;EACpF,KAAK,MAAMC,IAAI,IAAIN,QAAQ,EAAE;IACzB,MAAMO,QAAQ,GAAGD,IAAI,CAACE,IAAI,CAACpB,KAAK;IAChC,IAAIkB,IAAI,CAACG,MAAM,IAAI,IAAI,EAAE;MACrB;IACJ;IACA,KAAK,MAAMC,KAAK,IAAIJ,IAAI,CAACG,MAAM,EAAE;MAC7B,IAAIC,KAAK,CAACC,UAAU,IAAID,KAAK,CAACC,UAAU,CAAChB,MAAM,GAAG,CAAC,EAAE;QACjD,MAAMiB,SAAS,GAAGF,KAAK,CAACF,IAAI,CAACpB,KAAK;QAClC,MAAMyB,GAAG,GAAI,GAAEN,QAAS,IAAGK,SAAU,EAAC;QACtC,MAAMD,UAAU,GAAGD,KAAK,CAACC,UAAU,CAACG,GAAG,CAACC,CAAC,KAAK;UAC1CP,IAAI,EAAEO,CAAC,CAACP,IAAI,CAACpB,KAAK;UAClB4B,IAAI,EAAE,CAACD,CAAC,CAACrB,SAAS,IAAI,EAAE,EAAEuB,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,MAAM;YAAE,GAAGD,IAAI;YAAE,CAACC,GAAG,CAACX,IAAI,CAACpB,KAAK,GAAG,CAAC,CAAC,EAAEE,SAAS,CAAC8B,mBAAmB,EAAED,GAAG,CAAC/B,KAAK;UAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACtI,CAAC,CAAC,CAAC;QACHS,MAAM,CAACgB,GAAG,CAAC,GAAGF,UAAU;MAC5B;IACJ;EACJ;EACA,OAAOd,MAAM;AACjB;AACAV,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}