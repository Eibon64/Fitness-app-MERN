{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDefaultRules = exports.validateGraphQlDocuments = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction validateGraphQlDocuments(schema, documents) {\n  let rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createDefaultRules();\n  var _a;\n  const definitionMap = new Map();\n  for (const document of documents) {\n    for (const docDefinition of document.definitions) {\n      if ('name' in docDefinition && docDefinition.name) {\n        definitionMap.set(`${docDefinition.kind}_${docDefinition.name.value}`, docDefinition);\n      } else {\n        definitionMap.set(Date.now().toString(), docDefinition);\n      }\n    }\n  }\n  const fullAST = {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: Array.from(definitionMap.values())\n  };\n  const errors = (0, graphql_1.validate)(schema, fullAST, rules);\n  for (const error of errors) {\n    error.stack = error.message;\n    if (error.locations) {\n      for (const location of error.locations) {\n        error.stack += `\\n    at ${(_a = error.source) === null || _a === void 0 ? void 0 : _a.name}:${location.line}:${location.column}`;\n      }\n    }\n  }\n  return errors;\n}\nexports.validateGraphQlDocuments = validateGraphQlDocuments;\nfunction createDefaultRules() {\n  let ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n  if (graphql_1.versionInfo.major < 15) {\n    ignored = ignored.map(rule => rule.replace(/Rule$/, ''));\n  }\n  return graphql_1.specifiedRules.filter(f => !ignored.includes(f.name));\n}\nexports.createDefaultRules = createDefaultRules;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDefaultRules","validateGraphQlDocuments","graphql_1","require","schema","documents","rules","arguments","length","undefined","_a","definitionMap","Map","document","docDefinition","definitions","name","set","kind","Date","now","toString","fullAST","Kind","DOCUMENT","Array","from","values","errors","validate","error","stack","message","locations","location","source","line","column","ignored","versionInfo","major","map","rule","replace","specifiedRules","filter","f","includes"],"sources":["/Users/chadward/node_modules/@graphql-tools/utils/cjs/validate-documents.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDefaultRules = exports.validateGraphQlDocuments = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction validateGraphQlDocuments(schema, documents, rules = createDefaultRules()) {\n    var _a;\n    const definitionMap = new Map();\n    for (const document of documents) {\n        for (const docDefinition of document.definitions) {\n            if ('name' in docDefinition && docDefinition.name) {\n                definitionMap.set(`${docDefinition.kind}_${docDefinition.name.value}`, docDefinition);\n            }\n            else {\n                definitionMap.set(Date.now().toString(), docDefinition);\n            }\n        }\n    }\n    const fullAST = {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions: Array.from(definitionMap.values()),\n    };\n    const errors = (0, graphql_1.validate)(schema, fullAST, rules);\n    for (const error of errors) {\n        error.stack = error.message;\n        if (error.locations) {\n            for (const location of error.locations) {\n                error.stack += `\\n    at ${(_a = error.source) === null || _a === void 0 ? void 0 : _a.name}:${location.line}:${location.column}`;\n            }\n        }\n    }\n    return errors;\n}\nexports.validateGraphQlDocuments = validateGraphQlDocuments;\nfunction createDefaultRules() {\n    let ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n    if (graphql_1.versionInfo.major < 15) {\n        ignored = ignored.map(rule => rule.replace(/Rule$/, ''));\n    }\n    return graphql_1.specifiedRules.filter((f) => !ignored.includes(f.name));\n}\nexports.createDefaultRules = createDefaultRules;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,wBAAwB,GAAG,KAAK,CAAC;AACtE,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,SAASF,wBAAwBA,CAACG,MAAM,EAAEC,SAAS,EAAgC;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,kBAAkB,CAAC,CAAC;EAC7E,IAAIU,EAAE;EACN,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC/B,KAAK,MAAMC,QAAQ,IAAIR,SAAS,EAAE;IAC9B,KAAK,MAAMS,aAAa,IAAID,QAAQ,CAACE,WAAW,EAAE;MAC9C,IAAI,MAAM,IAAID,aAAa,IAAIA,aAAa,CAACE,IAAI,EAAE;QAC/CL,aAAa,CAACM,GAAG,CAAE,GAAEH,aAAa,CAACI,IAAK,IAAGJ,aAAa,CAACE,IAAI,CAACjB,KAAM,EAAC,EAAEe,aAAa,CAAC;MACzF,CAAC,MACI;QACDH,aAAa,CAACM,GAAG,CAACE,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAEP,aAAa,CAAC;MAC3D;IACJ;EACJ;EACA,MAAMQ,OAAO,GAAG;IACZJ,IAAI,EAAEhB,SAAS,CAACqB,IAAI,CAACC,QAAQ;IAC7BT,WAAW,EAAEU,KAAK,CAACC,IAAI,CAACf,aAAa,CAACgB,MAAM,CAAC,CAAC;EAClD,CAAC;EACD,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE1B,SAAS,CAAC2B,QAAQ,EAAEzB,MAAM,EAAEkB,OAAO,EAAEhB,KAAK,CAAC;EAC9D,KAAK,MAAMwB,KAAK,IAAIF,MAAM,EAAE;IACxBE,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACE,OAAO;IAC3B,IAAIF,KAAK,CAACG,SAAS,EAAE;MACjB,KAAK,MAAMC,QAAQ,IAAIJ,KAAK,CAACG,SAAS,EAAE;QACpCH,KAAK,CAACC,KAAK,IAAK,YAAW,CAACrB,EAAE,GAAGoB,KAAK,CAACK,MAAM,MAAM,IAAI,IAAIzB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,IAAK,IAAGkB,QAAQ,CAACE,IAAK,IAAGF,QAAQ,CAACG,MAAO,EAAC;MACrI;IACJ;EACJ;EACA,OAAOT,MAAM;AACjB;AACA9B,OAAO,CAACG,wBAAwB,GAAGA,wBAAwB;AAC3D,SAASD,kBAAkBA,CAAA,EAAG;EAC1B,IAAIsC,OAAO,GAAG,CAAC,uBAAuB,EAAE,uBAAuB,EAAE,qBAAqB,CAAC;EACvF,IAAIpC,SAAS,CAACqC,WAAW,CAACC,KAAK,GAAG,EAAE,EAAE;IAClCF,OAAO,GAAGA,OAAO,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;EAC5D;EACA,OAAOzC,SAAS,CAAC0C,cAAc,CAACC,MAAM,CAAEC,CAAC,IAAK,CAACR,OAAO,CAACS,QAAQ,CAACD,CAAC,CAAC9B,IAAI,CAAC,CAAC;AAC5E;AACAlB,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}