{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getArgumentValues = void 0;\nconst jsutils_js_1 = require(\"./jsutils.js\");\nconst graphql_1 = require(\"graphql\");\nconst errors_js_1 = require(\"./errors.js\");\nconst inspect_js_1 = require(\"./inspect.js\");\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node) {\n  let variableValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  const coercedValues = {};\n  const argumentNodes = (_a = node.arguments) !== null && _a !== void 0 ? _a : [];\n  const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n    ...prev,\n    [arg.name.value]: arg\n  }), {});\n  for (const {\n    name,\n    type: argType,\n    defaultValue\n  } of def.args) {\n    const argumentNode = argNodeMap[name];\n    if (!argumentNode) {\n      if (defaultValue !== undefined) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, graphql_1.isNonNullType)(argType)) {\n        throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" of required type \"${(0, inspect_js_1.inspect)(argType)}\" ` + 'was not provided.', {\n          nodes: [node]\n        });\n      }\n      continue;\n    }\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === graphql_1.Kind.NULL;\n    if (valueNode.kind === graphql_1.Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n      if (variableValues == null || !(0, jsutils_js_1.hasOwnProperty)(variableValues, variableName)) {\n        if (defaultValue !== undefined) {\n          coercedValues[name] = defaultValue;\n        } else if ((0, graphql_1.isNonNullType)(argType)) {\n          throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" of required type \"${(0, inspect_js_1.inspect)(argType)}\" ` + `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n            nodes: [valueNode]\n          });\n        }\n        continue;\n      }\n      isNull = variableValues[variableName] == null;\n    }\n    if (isNull && (0, graphql_1.isNonNullType)(argType)) {\n      throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" of non-null type \"${(0, inspect_js_1.inspect)(argType)}\" ` + 'must not be null.', {\n        nodes: [valueNode]\n      });\n    }\n    const coercedValue = (0, graphql_1.valueFromAST)(valueNode, argType, variableValues);\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" has invalid value ${(0, graphql_1.print)(valueNode)}.`, {\n        nodes: [valueNode]\n      });\n    }\n    coercedValues[name] = coercedValue;\n  }\n  return coercedValues;\n}\nexports.getArgumentValues = getArgumentValues;","map":{"version":3,"names":["Object","defineProperty","exports","value","getArgumentValues","jsutils_js_1","require","graphql_1","errors_js_1","inspect_js_1","def","node","variableValues","arguments","length","undefined","_a","coercedValues","argumentNodes","argNodeMap","reduce","prev","arg","name","type","argType","defaultValue","args","argumentNode","isNonNullType","createGraphQLError","inspect","nodes","valueNode","isNull","kind","Kind","NULL","VARIABLE","variableName","hasOwnProperty","coercedValue","valueFromAST","print"],"sources":["/Users/chadward/node_modules/@graphql-tools/utils/cjs/getArgumentValues.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getArgumentValues = void 0;\nconst jsutils_js_1 = require(\"./jsutils.js\");\nconst graphql_1 = require(\"graphql\");\nconst errors_js_1 = require(\"./errors.js\");\nconst inspect_js_1 = require(\"./inspect.js\");\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues = {}) {\n    var _a;\n    const coercedValues = {};\n    const argumentNodes = (_a = node.arguments) !== null && _a !== void 0 ? _a : [];\n    const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n        ...prev,\n        [arg.name.value]: arg,\n    }), {});\n    for (const { name, type: argType, defaultValue } of def.args) {\n        const argumentNode = argNodeMap[name];\n        if (!argumentNode) {\n            if (defaultValue !== undefined) {\n                coercedValues[name] = defaultValue;\n            }\n            else if ((0, graphql_1.isNonNullType)(argType)) {\n                throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" of required type \"${(0, inspect_js_1.inspect)(argType)}\" ` + 'was not provided.', {\n                    nodes: [node],\n                });\n            }\n            continue;\n        }\n        const valueNode = argumentNode.value;\n        let isNull = valueNode.kind === graphql_1.Kind.NULL;\n        if (valueNode.kind === graphql_1.Kind.VARIABLE) {\n            const variableName = valueNode.name.value;\n            if (variableValues == null || !(0, jsutils_js_1.hasOwnProperty)(variableValues, variableName)) {\n                if (defaultValue !== undefined) {\n                    coercedValues[name] = defaultValue;\n                }\n                else if ((0, graphql_1.isNonNullType)(argType)) {\n                    throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" of required type \"${(0, inspect_js_1.inspect)(argType)}\" ` +\n                        `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n                        nodes: [valueNode],\n                    });\n                }\n                continue;\n            }\n            isNull = variableValues[variableName] == null;\n        }\n        if (isNull && (0, graphql_1.isNonNullType)(argType)) {\n            throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" of non-null type \"${(0, inspect_js_1.inspect)(argType)}\" ` + 'must not be null.', {\n                nodes: [valueNode],\n            });\n        }\n        const coercedValue = (0, graphql_1.valueFromAST)(valueNode, argType, variableValues);\n        if (coercedValue === undefined) {\n            // Note: ValuesOfCorrectTypeRule validation should catch this before\n            // execution. This is a runtime check to ensure execution does not\n            // continue with an invalid argument value.\n            throw (0, errors_js_1.createGraphQLError)(`Argument \"${name}\" has invalid value ${(0, graphql_1.print)(valueNode)}.`, {\n                nodes: [valueNode],\n            });\n        }\n        coercedValues[name] = coercedValue;\n    }\n    return coercedValues;\n}\nexports.getArgumentValues = getArgumentValues;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}