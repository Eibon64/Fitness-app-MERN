{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeDirectiveNodes = exports.makeDirectiveNode = exports.makeDeprecatedDirective = exports.astFromEnumValue = exports.astFromInputField = exports.astFromField = exports.astFromScalarType = exports.astFromEnumType = exports.astFromInputObjectType = exports.astFromUnionType = exports.astFromInterfaceType = exports.astFromObjectType = exports.astFromArg = exports.getDeprecatableDirectiveNodes = exports.getDirectiveNodes = exports.astFromDirective = exports.astFromSchema = exports.printSchemaWithDirectives = exports.getDocumentNodeFromSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nconst astFromType_js_1 = require(\"./astFromType.js\");\nconst get_directives_js_1 = require(\"./get-directives.js\");\nconst astFromValueUntyped_js_1 = require(\"./astFromValueUntyped.js\");\nconst helpers_js_1 = require(\"./helpers.js\");\nconst rootTypes_js_1 = require(\"./rootTypes.js\");\nfunction getDocumentNodeFromSchema(schema) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;\n  const typesMap = schema.getTypeMap();\n  const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);\n  const definitions = schemaNode != null ? [schemaNode] : [];\n  const directives = schema.getDirectives();\n  for (const directive of directives) {\n    if ((0, graphql_1.isSpecifiedDirective)(directive)) {\n      continue;\n    }\n    definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));\n  }\n  for (const typeName in typesMap) {\n    const type = typesMap[typeName];\n    const isPredefinedScalar = (0, graphql_1.isSpecifiedScalarType)(type);\n    const isIntrospection = (0, graphql_1.isIntrospectionType)(type);\n    if (isPredefinedScalar || isIntrospection) {\n      continue;\n    }\n    if ((0, graphql_1.isObjectType)(type)) {\n      definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));\n    } else if ((0, graphql_1.isInterfaceType)(type)) {\n      definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));\n    } else if ((0, graphql_1.isUnionType)(type)) {\n      definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));\n    } else if ((0, graphql_1.isInputObjectType)(type)) {\n      definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));\n    } else if ((0, graphql_1.isEnumType)(type)) {\n      definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));\n    } else if ((0, graphql_1.isScalarType)(type)) {\n      definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));\n    } else {\n      throw new Error(`Unknown type ${type}.`);\n    }\n  }\n  return {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions\n  };\n}\nexports.getDocumentNodeFromSchema = getDocumentNodeFromSchema;\n// this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible\n// currently does not allow customization of printSchema options having to do with comments.\nfunction printSchemaWithDirectives(schema) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const documentNode = getDocumentNodeFromSchema(schema, options);\n  return (0, graphql_1.print)(documentNode);\n}\nexports.printSchemaWithDirectives = printSchemaWithDirectives;\nfunction astFromSchema(schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  const operationTypeMap = new Map([['query', undefined], ['mutation', undefined], ['subscription', undefined]]);\n  const nodes = [];\n  if (schema.astNode != null) {\n    nodes.push(schema.astNode);\n  }\n  if (schema.extensionASTNodes != null) {\n    for (const extensionASTNode of schema.extensionASTNodes) {\n      nodes.push(extensionASTNode);\n    }\n  }\n  for (const node of nodes) {\n    if (node.operationTypes) {\n      for (const operationTypeDefinitionNode of node.operationTypes) {\n        operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);\n      }\n    }\n  }\n  const rootTypeMap = (0, rootTypes_js_1.getRootTypeMap)(schema);\n  for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {\n    const rootType = rootTypeMap.get(operationTypeNode);\n    if (rootType != null) {\n      const rootTypeAST = (0, astFromType_js_1.astFromType)(rootType);\n      if (operationTypeDefinitionNode != null) {\n        operationTypeDefinitionNode.type = rootTypeAST;\n      } else {\n        operationTypeMap.set(operationTypeNode, {\n          kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,\n          operation: operationTypeNode,\n          type: rootTypeAST\n        });\n      }\n    }\n  }\n  const operationTypes = [...operationTypeMap.values()].filter(helpers_js_1.isSome);\n  const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);\n  if (!operationTypes.length && !directives.length) {\n    return null;\n  }\n  const schemaNode = {\n    kind: operationTypes != null ? graphql_1.Kind.SCHEMA_DEFINITION : graphql_1.Kind.SCHEMA_EXTENSION,\n    operationTypes,\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: directives\n  };\n  // This code is so weird because it needs to support GraphQL.js 14\n  // In GraphQL.js 14 there is no `description` value on schemaNode\n  schemaNode.description = ((_b = (_a = schema.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : schema.description != null) ? {\n    kind: graphql_1.Kind.STRING,\n    value: schema.description,\n    block: true\n  } : undefined;\n  return schemaNode;\n}\nexports.astFromSchema = astFromSchema;\nfunction astFromDirective(directive, schema, pathToDirectivesInExtensions) {\n  var _a, _b, _c, _d;\n  return {\n    kind: graphql_1.Kind.DIRECTIVE_DEFINITION,\n    description: (_b = (_a = directive.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : directive.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: directive.description\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: directive.name\n    },\n    arguments: (_c = directive.args) === null || _c === void 0 ? void 0 : _c.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n    repeatable: directive.isRepeatable,\n    locations: ((_d = directive.locations) === null || _d === void 0 ? void 0 : _d.map(location => ({\n      kind: graphql_1.Kind.NAME,\n      value: location\n    }))) || []\n  };\n}\nexports.astFromDirective = astFromDirective;\nfunction getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n  const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(entity, pathToDirectivesInExtensions);\n  let nodes = [];\n  if (entity.astNode != null) {\n    nodes.push(entity.astNode);\n  }\n  if ('extensionASTNodes' in entity && entity.extensionASTNodes != null) {\n    nodes = nodes.concat(entity.extensionASTNodes);\n  }\n  let directives;\n  if (directivesInExtensions != null) {\n    directives = makeDirectiveNodes(schema, directivesInExtensions);\n  } else {\n    directives = [];\n    for (const node of nodes) {\n      if (node.directives) {\n        directives.push(...node.directives);\n      }\n    }\n  }\n  return directives;\n}\nexports.getDirectiveNodes = getDirectiveNodes;\nfunction getDeprecatableDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  let directiveNodesBesidesDeprecated = [];\n  let deprecatedDirectiveNode = null;\n  const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(entity, pathToDirectivesInExtensions);\n  let directives;\n  if (directivesInExtensions != null) {\n    directives = makeDirectiveNodes(schema, directivesInExtensions);\n  } else {\n    directives = (_a = entity.astNode) === null || _a === void 0 ? void 0 : _a.directives;\n  }\n  if (directives != null) {\n    directiveNodesBesidesDeprecated = directives.filter(directive => directive.name.value !== 'deprecated');\n    if (entity.deprecationReason != null) {\n      deprecatedDirectiveNode = (_b = directives.filter(directive => directive.name.value === 'deprecated')) === null || _b === void 0 ? void 0 : _b[0];\n    }\n  }\n  if (entity.deprecationReason != null && deprecatedDirectiveNode == null) {\n    deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);\n  }\n  return deprecatedDirectiveNode == null ? directiveNodesBesidesDeprecated : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);\n}\nexports.getDeprecatableDirectiveNodes = getDeprecatableDirectiveNodes;\nfunction astFromArg(arg, schema, pathToDirectivesInExtensions) {\n  var _a, _b, _c;\n  return {\n    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,\n    description: (_b = (_a = arg.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : arg.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: arg.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: arg.name\n    },\n    type: (0, astFromType_js_1.astFromType)(arg.type),\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    defaultValue: arg.defaultValue !== undefined ? (_c = (0, graphql_1.astFromValue)(arg.defaultValue, arg.type)) !== null && _c !== void 0 ? _c : undefined : undefined,\n    directives: getDeprecatableDirectiveNodes(arg, schema, pathToDirectivesInExtensions)\n  };\n}\nexports.astFromArg = astFromArg;\nfunction astFromObjectType(type, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  return {\n    kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,\n    description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: type.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    },\n    fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n    interfaces: Object.values(type.getInterfaces()).map(iFace => (0, astFromType_js_1.astFromType)(iFace)),\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)\n  };\n}\nexports.astFromObjectType = astFromObjectType;\nfunction astFromInterfaceType(type, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  const node = {\n    kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,\n    description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: type.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    },\n    fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)\n  };\n  if ('getInterfaces' in type) {\n    node.interfaces = Object.values(type.getInterfaces()).map(iFace => (0, astFromType_js_1.astFromType)(iFace));\n  }\n  return node;\n}\nexports.astFromInterfaceType = astFromInterfaceType;\nfunction astFromUnionType(type, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  return {\n    kind: graphql_1.Kind.UNION_TYPE_DEFINITION,\n    description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: type.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    },\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    types: type.getTypes().map(type => (0, astFromType_js_1.astFromType)(type))\n  };\n}\nexports.astFromUnionType = astFromUnionType;\nfunction astFromInputObjectType(type, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  return {\n    kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: type.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    },\n    fields: Object.values(type.getFields()).map(field => astFromInputField(field, schema, pathToDirectivesInExtensions)),\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)\n  };\n}\nexports.astFromInputObjectType = astFromInputObjectType;\nfunction astFromEnumType(type, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  return {\n    kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,\n    description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: type.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    },\n    values: Object.values(type.getValues()).map(value => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)\n  };\n}\nexports.astFromEnumType = astFromEnumType;\nfunction astFromScalarType(type, schema, pathToDirectivesInExtensions) {\n  var _a, _b, _c;\n  const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(type, pathToDirectivesInExtensions);\n  const directives = directivesInExtensions ? makeDirectiveNodes(schema, directivesInExtensions) : ((_a = type.astNode) === null || _a === void 0 ? void 0 : _a.directives) || [];\n  const specifiedByValue = type['specifiedByUrl'] || type['specifiedByURL'];\n  if (specifiedByValue && !directives.some(directiveNode => directiveNode.name.value === 'specifiedBy')) {\n    const specifiedByArgs = {\n      url: specifiedByValue\n    };\n    directives.push(makeDirectiveNode('specifiedBy', specifiedByArgs));\n  }\n  return {\n    kind: graphql_1.Kind.SCALAR_TYPE_DEFINITION,\n    description: (_c = (_b = type.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c !== void 0 ? _c : type.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: type.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: type.name\n    },\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: directives\n  };\n}\nexports.astFromScalarType = astFromScalarType;\nfunction astFromField(field, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  return {\n    kind: graphql_1.Kind.FIELD_DEFINITION,\n    description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : field.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: field.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: field.name\n    },\n    arguments: field.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n    type: (0, astFromType_js_1.astFromType)(field.type),\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions)\n  };\n}\nexports.astFromField = astFromField;\nfunction astFromInputField(field, schema, pathToDirectivesInExtensions) {\n  var _a, _b, _c;\n  return {\n    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,\n    description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : field.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: field.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: field.name\n    },\n    type: (0, astFromType_js_1.astFromType)(field.type),\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n    defaultValue: (_c = (0, graphql_1.astFromValue)(field.defaultValue, field.type)) !== null && _c !== void 0 ? _c : undefined\n  };\n}\nexports.astFromInputField = astFromInputField;\nfunction astFromEnumValue(value, schema, pathToDirectivesInExtensions) {\n  var _a, _b;\n  return {\n    kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,\n    description: (_b = (_a = value.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : value.description ? {\n      kind: graphql_1.Kind.STRING,\n      value: value.description,\n      block: true\n    } : undefined,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: value.name\n    },\n    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n    directives: getDeprecatableDirectiveNodes(value, schema, pathToDirectivesInExtensions)\n  };\n}\nexports.astFromEnumValue = astFromEnumValue;\nfunction makeDeprecatedDirective(deprecationReason) {\n  return makeDirectiveNode('deprecated', {\n    reason: deprecationReason\n  }, graphql_1.GraphQLDeprecatedDirective);\n}\nexports.makeDeprecatedDirective = makeDeprecatedDirective;\nfunction makeDirectiveNode(name, args, directive) {\n  const directiveArguments = [];\n  if (directive != null) {\n    for (const arg of directive.args) {\n      const argName = arg.name;\n      const argValue = args[argName];\n      if (argValue !== undefined) {\n        const value = (0, graphql_1.astFromValue)(argValue, arg.type);\n        if (value) {\n          directiveArguments.push({\n            kind: graphql_1.Kind.ARGUMENT,\n            name: {\n              kind: graphql_1.Kind.NAME,\n              value: argName\n            },\n            value\n          });\n        }\n      }\n    }\n  } else {\n    for (const argName in args) {\n      const argValue = args[argName];\n      const value = (0, astFromValueUntyped_js_1.astFromValueUntyped)(argValue);\n      if (value) {\n        directiveArguments.push({\n          kind: graphql_1.Kind.ARGUMENT,\n          name: {\n            kind: graphql_1.Kind.NAME,\n            value: argName\n          },\n          value\n        });\n      }\n    }\n  }\n  return {\n    kind: graphql_1.Kind.DIRECTIVE,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: name\n    },\n    arguments: directiveArguments\n  };\n}\nexports.makeDirectiveNode = makeDirectiveNode;\nfunction makeDirectiveNodes(schema, directiveValues) {\n  const directiveNodes = [];\n  for (const directiveName in directiveValues) {\n    const arrayOrSingleValue = directiveValues[directiveName];\n    const directive = schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName);\n    if (Array.isArray(arrayOrSingleValue)) {\n      for (const value of arrayOrSingleValue) {\n        directiveNodes.push(makeDirectiveNode(directiveName, value, directive));\n      }\n    } else {\n      directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));\n    }\n  }\n  return directiveNodes;\n}\nexports.makeDirectiveNodes = makeDirectiveNodes;","map":{"version":3,"names":["Object","defineProperty","exports","value","makeDirectiveNodes","makeDirectiveNode","makeDeprecatedDirective","astFromEnumValue","astFromInputField","astFromField","astFromScalarType","astFromEnumType","astFromInputObjectType","astFromUnionType","astFromInterfaceType","astFromObjectType","astFromArg","getDeprecatableDirectiveNodes","getDirectiveNodes","astFromDirective","astFromSchema","printSchemaWithDirectives","getDocumentNodeFromSchema","graphql_1","require","astFromType_js_1","get_directives_js_1","astFromValueUntyped_js_1","helpers_js_1","rootTypes_js_1","schema","options","arguments","length","undefined","pathToDirectivesInExtensions","typesMap","getTypeMap","schemaNode","definitions","directives","getDirectives","directive","isSpecifiedDirective","push","typeName","type","isPredefinedScalar","isSpecifiedScalarType","isIntrospection","isIntrospectionType","isObjectType","isInterfaceType","isUnionType","isInputObjectType","isEnumType","isScalarType","Error","kind","Kind","DOCUMENT","documentNode","print","_a","_b","operationTypeMap","Map","nodes","astNode","extensionASTNodes","extensionASTNode","node","operationTypes","operationTypeDefinitionNode","set","operation","rootTypeMap","getRootTypeMap","operationTypeNode","rootType","get","rootTypeAST","astFromType","OPERATION_TYPE_DEFINITION","values","filter","isSome","SCHEMA_DEFINITION","SCHEMA_EXTENSION","description","STRING","block","_c","_d","DIRECTIVE_DEFINITION","name","NAME","args","map","arg","repeatable","isRepeatable","locations","location","entity","directivesInExtensions","getDirectivesInExtensions","concat","directiveNodesBesidesDeprecated","deprecatedDirectiveNode","deprecationReason","INPUT_VALUE_DEFINITION","defaultValue","astFromValue","OBJECT_TYPE_DEFINITION","fields","getFields","field","interfaces","getInterfaces","iFace","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","types","getTypes","INPUT_OBJECT_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","getValues","specifiedByValue","some","directiveNode","specifiedByArgs","url","SCALAR_TYPE_DEFINITION","FIELD_DEFINITION","ENUM_VALUE_DEFINITION","reason","GraphQLDeprecatedDirective","directiveArguments","argName","argValue","ARGUMENT","astFromValueUntyped","DIRECTIVE","directiveValues","directiveNodes","directiveName","arrayOrSingleValue","getDirective","Array","isArray"],"sources":["/Users/chadward/node_modules/@graphql-tools/utils/cjs/print-schema-with-directives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeDirectiveNodes = exports.makeDirectiveNode = exports.makeDeprecatedDirective = exports.astFromEnumValue = exports.astFromInputField = exports.astFromField = exports.astFromScalarType = exports.astFromEnumType = exports.astFromInputObjectType = exports.astFromUnionType = exports.astFromInterfaceType = exports.astFromObjectType = exports.astFromArg = exports.getDeprecatableDirectiveNodes = exports.getDirectiveNodes = exports.astFromDirective = exports.astFromSchema = exports.printSchemaWithDirectives = exports.getDocumentNodeFromSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nconst astFromType_js_1 = require(\"./astFromType.js\");\nconst get_directives_js_1 = require(\"./get-directives.js\");\nconst astFromValueUntyped_js_1 = require(\"./astFromValueUntyped.js\");\nconst helpers_js_1 = require(\"./helpers.js\");\nconst rootTypes_js_1 = require(\"./rootTypes.js\");\nfunction getDocumentNodeFromSchema(schema, options = {}) {\n    const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;\n    const typesMap = schema.getTypeMap();\n    const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);\n    const definitions = schemaNode != null ? [schemaNode] : [];\n    const directives = schema.getDirectives();\n    for (const directive of directives) {\n        if ((0, graphql_1.isSpecifiedDirective)(directive)) {\n            continue;\n        }\n        definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));\n    }\n    for (const typeName in typesMap) {\n        const type = typesMap[typeName];\n        const isPredefinedScalar = (0, graphql_1.isSpecifiedScalarType)(type);\n        const isIntrospection = (0, graphql_1.isIntrospectionType)(type);\n        if (isPredefinedScalar || isIntrospection) {\n            continue;\n        }\n        if ((0, graphql_1.isObjectType)(type)) {\n            definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if ((0, graphql_1.isInterfaceType)(type)) {\n            definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if ((0, graphql_1.isUnionType)(type)) {\n            definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if ((0, graphql_1.isInputObjectType)(type)) {\n            definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if ((0, graphql_1.isEnumType)(type)) {\n            definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if ((0, graphql_1.isScalarType)(type)) {\n            definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));\n        }\n        else {\n            throw new Error(`Unknown type ${type}.`);\n        }\n    }\n    return {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions,\n    };\n}\nexports.getDocumentNodeFromSchema = getDocumentNodeFromSchema;\n// this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible\n// currently does not allow customization of printSchema options having to do with comments.\nfunction printSchemaWithDirectives(schema, options = {}) {\n    const documentNode = getDocumentNodeFromSchema(schema, options);\n    return (0, graphql_1.print)(documentNode);\n}\nexports.printSchemaWithDirectives = printSchemaWithDirectives;\nfunction astFromSchema(schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    const operationTypeMap = new Map([\n        ['query', undefined],\n        ['mutation', undefined],\n        ['subscription', undefined],\n    ]);\n    const nodes = [];\n    if (schema.astNode != null) {\n        nodes.push(schema.astNode);\n    }\n    if (schema.extensionASTNodes != null) {\n        for (const extensionASTNode of schema.extensionASTNodes) {\n            nodes.push(extensionASTNode);\n        }\n    }\n    for (const node of nodes) {\n        if (node.operationTypes) {\n            for (const operationTypeDefinitionNode of node.operationTypes) {\n                operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);\n            }\n        }\n    }\n    const rootTypeMap = (0, rootTypes_js_1.getRootTypeMap)(schema);\n    for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {\n        const rootType = rootTypeMap.get(operationTypeNode);\n        if (rootType != null) {\n            const rootTypeAST = (0, astFromType_js_1.astFromType)(rootType);\n            if (operationTypeDefinitionNode != null) {\n                operationTypeDefinitionNode.type = rootTypeAST;\n            }\n            else {\n                operationTypeMap.set(operationTypeNode, {\n                    kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,\n                    operation: operationTypeNode,\n                    type: rootTypeAST,\n                });\n            }\n        }\n    }\n    const operationTypes = [...operationTypeMap.values()].filter(helpers_js_1.isSome);\n    const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);\n    if (!operationTypes.length && !directives.length) {\n        return null;\n    }\n    const schemaNode = {\n        kind: operationTypes != null ? graphql_1.Kind.SCHEMA_DEFINITION : graphql_1.Kind.SCHEMA_EXTENSION,\n        operationTypes,\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n    // This code is so weird because it needs to support GraphQL.js 14\n    // In GraphQL.js 14 there is no `description` value on schemaNode\n    schemaNode.description =\n        ((_b = (_a = schema.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : schema.description != null)\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: schema.description,\n                block: true,\n            }\n            : undefined;\n    return schemaNode;\n}\nexports.astFromSchema = astFromSchema;\nfunction astFromDirective(directive, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c, _d;\n    return {\n        kind: graphql_1.Kind.DIRECTIVE_DEFINITION,\n        description: (_b = (_a = directive.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (directive.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: directive.description,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: directive.name,\n        },\n        arguments: (_c = directive.args) === null || _c === void 0 ? void 0 : _c.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        repeatable: directive.isRepeatable,\n        locations: ((_d = directive.locations) === null || _d === void 0 ? void 0 : _d.map(location => ({\n            kind: graphql_1.Kind.NAME,\n            value: location,\n        }))) || [],\n    };\n}\nexports.astFromDirective = astFromDirective;\nfunction getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(entity, pathToDirectivesInExtensions);\n    let nodes = [];\n    if (entity.astNode != null) {\n        nodes.push(entity.astNode);\n    }\n    if ('extensionASTNodes' in entity && entity.extensionASTNodes != null) {\n        nodes = nodes.concat(entity.extensionASTNodes);\n    }\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    else {\n        directives = [];\n        for (const node of nodes) {\n            if (node.directives) {\n                directives.push(...node.directives);\n            }\n        }\n    }\n    return directives;\n}\nexports.getDirectiveNodes = getDirectiveNodes;\nfunction getDeprecatableDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    let directiveNodesBesidesDeprecated = [];\n    let deprecatedDirectiveNode = null;\n    const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(entity, pathToDirectivesInExtensions);\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    else {\n        directives = (_a = entity.astNode) === null || _a === void 0 ? void 0 : _a.directives;\n    }\n    if (directives != null) {\n        directiveNodesBesidesDeprecated = directives.filter(directive => directive.name.value !== 'deprecated');\n        if (entity.deprecationReason != null) {\n            deprecatedDirectiveNode = (_b = directives.filter(directive => directive.name.value === 'deprecated')) === null || _b === void 0 ? void 0 : _b[0];\n        }\n    }\n    if (entity.deprecationReason != null &&\n        deprecatedDirectiveNode == null) {\n        deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);\n    }\n    return deprecatedDirectiveNode == null\n        ? directiveNodesBesidesDeprecated\n        : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);\n}\nexports.getDeprecatableDirectiveNodes = getDeprecatableDirectiveNodes;\nfunction astFromArg(arg, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    return {\n        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,\n        description: (_b = (_a = arg.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (arg.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: arg.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: arg.name,\n        },\n        type: (0, astFromType_js_1.astFromType)(arg.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        defaultValue: arg.defaultValue !== undefined ? (_c = (0, graphql_1.astFromValue)(arg.defaultValue, arg.type)) !== null && _c !== void 0 ? _c : undefined : undefined,\n        directives: getDeprecatableDirectiveNodes(arg, schema, pathToDirectivesInExtensions),\n    };\n}\nexports.astFromArg = astFromArg;\nfunction astFromObjectType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        interfaces: Object.values(type.getInterfaces()).map(iFace => (0, astFromType_js_1.astFromType)(iFace)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nexports.astFromObjectType = astFromObjectType;\nfunction astFromInterfaceType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    const node = {\n        kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n    if ('getInterfaces' in type) {\n        node.interfaces = Object.values(type.getInterfaces()).map(iFace => (0, astFromType_js_1.astFromType)(iFace));\n    }\n    return node;\n}\nexports.astFromInterfaceType = astFromInterfaceType;\nfunction astFromUnionType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: graphql_1.Kind.UNION_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n        types: type.getTypes().map(type => (0, astFromType_js_1.astFromType)(type)),\n    };\n}\nexports.astFromUnionType = astFromUnionType;\nfunction astFromInputObjectType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromInputField(field, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nexports.astFromInputObjectType = astFromInputObjectType;\nfunction astFromEnumType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n        values: Object.values(type.getValues()).map(value => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nexports.astFromEnumType = astFromEnumType;\nfunction astFromScalarType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(type, pathToDirectivesInExtensions);\n    const directives = directivesInExtensions\n        ? makeDirectiveNodes(schema, directivesInExtensions)\n        : ((_a = type.astNode) === null || _a === void 0 ? void 0 : _a.directives) || [];\n    const specifiedByValue = (type['specifiedByUrl'] || type['specifiedByURL']);\n    if (specifiedByValue && !directives.some(directiveNode => directiveNode.name.value === 'specifiedBy')) {\n        const specifiedByArgs = {\n            url: specifiedByValue,\n        };\n        directives.push(makeDirectiveNode('specifiedBy', specifiedByArgs));\n    }\n    return {\n        kind: graphql_1.Kind.SCALAR_TYPE_DEFINITION,\n        description: (_c = (_b = type.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c !== void 0 ? _c : (type.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n}\nexports.astFromScalarType = astFromScalarType;\nfunction astFromField(field, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: graphql_1.Kind.FIELD_DEFINITION,\n        description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (field.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: field.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: field.name,\n        },\n        arguments: field.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        type: (0, astFromType_js_1.astFromType)(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n    };\n}\nexports.astFromField = astFromField;\nfunction astFromInputField(field, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    return {\n        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,\n        description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (field.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: field.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: field.name,\n        },\n        type: (0, astFromType_js_1.astFromType)(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n        defaultValue: (_c = (0, graphql_1.astFromValue)(field.defaultValue, field.type)) !== null && _c !== void 0 ? _c : undefined,\n    };\n}\nexports.astFromInputField = astFromInputField;\nfunction astFromEnumValue(value, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,\n        description: (_b = (_a = value.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (value.description\n            ? {\n                kind: graphql_1.Kind.STRING,\n                value: value.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: value.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(value, schema, pathToDirectivesInExtensions),\n    };\n}\nexports.astFromEnumValue = astFromEnumValue;\nfunction makeDeprecatedDirective(deprecationReason) {\n    return makeDirectiveNode('deprecated', { reason: deprecationReason }, graphql_1.GraphQLDeprecatedDirective);\n}\nexports.makeDeprecatedDirective = makeDeprecatedDirective;\nfunction makeDirectiveNode(name, args, directive) {\n    const directiveArguments = [];\n    if (directive != null) {\n        for (const arg of directive.args) {\n            const argName = arg.name;\n            const argValue = args[argName];\n            if (argValue !== undefined) {\n                const value = (0, graphql_1.astFromValue)(argValue, arg.type);\n                if (value) {\n                    directiveArguments.push({\n                        kind: graphql_1.Kind.ARGUMENT,\n                        name: {\n                            kind: graphql_1.Kind.NAME,\n                            value: argName,\n                        },\n                        value,\n                    });\n                }\n            }\n        }\n    }\n    else {\n        for (const argName in args) {\n            const argValue = args[argName];\n            const value = (0, astFromValueUntyped_js_1.astFromValueUntyped)(argValue);\n            if (value) {\n                directiveArguments.push({\n                    kind: graphql_1.Kind.ARGUMENT,\n                    name: {\n                        kind: graphql_1.Kind.NAME,\n                        value: argName,\n                    },\n                    value,\n                });\n            }\n        }\n    }\n    return {\n        kind: graphql_1.Kind.DIRECTIVE,\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: name,\n        },\n        arguments: directiveArguments,\n    };\n}\nexports.makeDirectiveNode = makeDirectiveNode;\nfunction makeDirectiveNodes(schema, directiveValues) {\n    const directiveNodes = [];\n    for (const directiveName in directiveValues) {\n        const arrayOrSingleValue = directiveValues[directiveName];\n        const directive = schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName);\n        if (Array.isArray(arrayOrSingleValue)) {\n            for (const value of arrayOrSingleValue) {\n                directiveNodes.push(makeDirectiveNode(directiveName, value, directive));\n            }\n        }\n        else {\n            directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));\n        }\n    }\n    return directiveNodes;\n}\nexports.makeDirectiveNodes = makeDirectiveNodes;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}