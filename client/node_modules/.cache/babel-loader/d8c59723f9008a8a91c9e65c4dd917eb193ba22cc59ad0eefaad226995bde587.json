{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDirective = exports.getDirectives = exports.getDirectiveInExtensions = exports.getDirectivesInExtensions = void 0;\nconst getArgumentValues_js_1 = require(\"./getArgumentValues.js\");\nfunction getDirectivesInExtensions(node) {\n  let pathToDirectivesInExtensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['directives'];\n  return pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);\n}\nexports.getDirectivesInExtensions = getDirectivesInExtensions;\nfunction _getDirectiveInExtensions(directivesInExtensions, directiveName) {\n  const directiveInExtensions = directivesInExtensions.filter(directiveAnnotation => directiveAnnotation.name === directiveName);\n  if (!directiveInExtensions.length) {\n    return undefined;\n  }\n  return directiveInExtensions.map(directive => {\n    var _a;\n    return (_a = directive.args) !== null && _a !== void 0 ? _a : {};\n  });\n}\nfunction getDirectiveInExtensions(node, directiveName) {\n  let pathToDirectivesInExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['directives'];\n  const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);\n  if (directivesInExtensions === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(directivesInExtensions)) {\n    return _getDirectiveInExtensions(directivesInExtensions, directiveName);\n  }\n  // Support condensed format by converting to longer format\n  // The condensed format does not preserve ordering of directives when  repeatable directives are used.\n  // See https://github.com/ardatan/graphql-tools/issues/2534\n  const reformattedDirectivesInExtensions = [];\n  for (const [name, argsOrArrayOfArgs] of Object.entries(directivesInExtensions)) {\n    if (Array.isArray(argsOrArrayOfArgs)) {\n      for (const args of argsOrArrayOfArgs) {\n        reformattedDirectivesInExtensions.push({\n          name,\n          args\n        });\n      }\n    } else {\n      reformattedDirectivesInExtensions.push({\n        name,\n        args: argsOrArrayOfArgs\n      });\n    }\n  }\n  return _getDirectiveInExtensions(reformattedDirectivesInExtensions, directiveName);\n}\nexports.getDirectiveInExtensions = getDirectiveInExtensions;\nfunction getDirectives(schema, node) {\n  let pathToDirectivesInExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['directives'];\n  const directivesInExtensions = getDirectivesInExtensions(node, pathToDirectivesInExtensions);\n  if (directivesInExtensions != null && directivesInExtensions.length > 0) {\n    return directivesInExtensions;\n  }\n  const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];\n  const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap, schemaDirective) => {\n    schemaDirectiveMap[schemaDirective.name] = schemaDirective;\n    return schemaDirectiveMap;\n  }, {});\n  let astNodes = [];\n  if (node.astNode) {\n    astNodes.push(node.astNode);\n  }\n  if ('extensionASTNodes' in node && node.extensionASTNodes) {\n    astNodes = [...astNodes, ...node.extensionASTNodes];\n  }\n  const result = [];\n  for (const astNode of astNodes) {\n    if (astNode.directives) {\n      for (const directiveNode of astNode.directives) {\n        const schemaDirective = schemaDirectiveMap[directiveNode.name.value];\n        if (schemaDirective) {\n          result.push({\n            name: directiveNode.name.value,\n            args: (0, getArgumentValues_js_1.getArgumentValues)(schemaDirective, directiveNode)\n          });\n        }\n      }\n    }\n  }\n  return result;\n}\nexports.getDirectives = getDirectives;\nfunction getDirective(schema, node, directiveName) {\n  let pathToDirectivesInExtensions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ['directives'];\n  const directiveInExtensions = getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions);\n  if (directiveInExtensions != null) {\n    return directiveInExtensions;\n  }\n  const schemaDirective = schema && schema.getDirective ? schema.getDirective(directiveName) : undefined;\n  if (schemaDirective == null) {\n    return undefined;\n  }\n  let astNodes = [];\n  if (node.astNode) {\n    astNodes.push(node.astNode);\n  }\n  if ('extensionASTNodes' in node && node.extensionASTNodes) {\n    astNodes = [...astNodes, ...node.extensionASTNodes];\n  }\n  const result = [];\n  for (const astNode of astNodes) {\n    if (astNode.directives) {\n      for (const directiveNode of astNode.directives) {\n        if (directiveNode.name.value === directiveName) {\n          result.push((0, getArgumentValues_js_1.getArgumentValues)(schemaDirective, directiveNode));\n        }\n      }\n    }\n  }\n  if (!result.length) {\n    return undefined;\n  }\n  return result;\n}\nexports.getDirective = getDirective;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDirective","getDirectives","getDirectiveInExtensions","getDirectivesInExtensions","getArgumentValues_js_1","require","node","pathToDirectivesInExtensions","arguments","length","undefined","reduce","acc","pathSegment","extensions","_getDirectiveInExtensions","directivesInExtensions","directiveName","directiveInExtensions","filter","directiveAnnotation","name","map","directive","_a","args","Array","isArray","reformattedDirectivesInExtensions","argsOrArrayOfArgs","entries","push","schema","schemaDirectives","schemaDirectiveMap","schemaDirective","astNodes","astNode","extensionASTNodes","result","directives","directiveNode","getArgumentValues"],"sources":["/Users/chadward/node_modules/@graphql-tools/utils/cjs/get-directives.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDirective = exports.getDirectives = exports.getDirectiveInExtensions = exports.getDirectivesInExtensions = void 0;\nconst getArgumentValues_js_1 = require(\"./getArgumentValues.js\");\nfunction getDirectivesInExtensions(node, pathToDirectivesInExtensions = ['directives']) {\n    return pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);\n}\nexports.getDirectivesInExtensions = getDirectivesInExtensions;\nfunction _getDirectiveInExtensions(directivesInExtensions, directiveName) {\n    const directiveInExtensions = directivesInExtensions.filter(directiveAnnotation => directiveAnnotation.name === directiveName);\n    if (!directiveInExtensions.length) {\n        return undefined;\n    }\n    return directiveInExtensions.map(directive => { var _a; return (_a = directive.args) !== null && _a !== void 0 ? _a : {}; });\n}\nfunction getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);\n    if (directivesInExtensions === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(directivesInExtensions)) {\n        return _getDirectiveInExtensions(directivesInExtensions, directiveName);\n    }\n    // Support condensed format by converting to longer format\n    // The condensed format does not preserve ordering of directives when  repeatable directives are used.\n    // See https://github.com/ardatan/graphql-tools/issues/2534\n    const reformattedDirectivesInExtensions = [];\n    for (const [name, argsOrArrayOfArgs] of Object.entries(directivesInExtensions)) {\n        if (Array.isArray(argsOrArrayOfArgs)) {\n            for (const args of argsOrArrayOfArgs) {\n                reformattedDirectivesInExtensions.push({ name, args });\n            }\n        }\n        else {\n            reformattedDirectivesInExtensions.push({ name, args: argsOrArrayOfArgs });\n        }\n    }\n    return _getDirectiveInExtensions(reformattedDirectivesInExtensions, directiveName);\n}\nexports.getDirectiveInExtensions = getDirectiveInExtensions;\nfunction getDirectives(schema, node, pathToDirectivesInExtensions = ['directives']) {\n    const directivesInExtensions = getDirectivesInExtensions(node, pathToDirectivesInExtensions);\n    if (directivesInExtensions != null && directivesInExtensions.length > 0) {\n        return directivesInExtensions;\n    }\n    const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];\n    const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap, schemaDirective) => {\n        schemaDirectiveMap[schemaDirective.name] = schemaDirective;\n        return schemaDirectiveMap;\n    }, {});\n    let astNodes = [];\n    if (node.astNode) {\n        astNodes.push(node.astNode);\n    }\n    if ('extensionASTNodes' in node && node.extensionASTNodes) {\n        astNodes = [...astNodes, ...node.extensionASTNodes];\n    }\n    const result = [];\n    for (const astNode of astNodes) {\n        if (astNode.directives) {\n            for (const directiveNode of astNode.directives) {\n                const schemaDirective = schemaDirectiveMap[directiveNode.name.value];\n                if (schemaDirective) {\n                    result.push({ name: directiveNode.name.value, args: (0, getArgumentValues_js_1.getArgumentValues)(schemaDirective, directiveNode) });\n                }\n            }\n        }\n    }\n    return result;\n}\nexports.getDirectives = getDirectives;\nfunction getDirective(schema, node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directiveInExtensions = getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions);\n    if (directiveInExtensions != null) {\n        return directiveInExtensions;\n    }\n    const schemaDirective = schema && schema.getDirective ? schema.getDirective(directiveName) : undefined;\n    if (schemaDirective == null) {\n        return undefined;\n    }\n    let astNodes = [];\n    if (node.astNode) {\n        astNodes.push(node.astNode);\n    }\n    if ('extensionASTNodes' in node && node.extensionASTNodes) {\n        astNodes = [...astNodes, ...node.extensionASTNodes];\n    }\n    const result = [];\n    for (const astNode of astNodes) {\n        if (astNode.directives) {\n            for (const directiveNode of astNode.directives) {\n                if (directiveNode.name.value === directiveName) {\n                    result.push((0, getArgumentValues_js_1.getArgumentValues)(schemaDirective, directiveNode));\n                }\n            }\n        }\n    }\n    if (!result.length) {\n        return undefined;\n    }\n    return result;\n}\nexports.getDirective = getDirective;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}